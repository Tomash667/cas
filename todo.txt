+ array
vector functions:
		count
		push
		pop
		front
		back
		insert
		erase
		at
		empty
	+ const size
	+ braces initialization
	+ for each
	+ operator []

+ variadic functions (params)
+ call function before declaration

+ class
	+ script register (need to have 2 types - one that are initialized once, second that is cleaned up between parsings)
	+ script method
	+ script ctor
	+ dtor
	+ operators + - etc
	+ string member
	+ class member
	+ properties
	+ default value for class argument in function
	+ unit test register c++ struct (require modules)

+ default string for code function
+ allow reuse variable name
+ object/string deconstruction
+ checking ref counter on cleanup (for class/string)
+ builtin unit tests for parsing errors
+ cast operator (type)x or x as type ?
+ warn about implict cast (setting)
+ custom cast operators
+ no memleaks, reuse ParseNode (currently there will be old childs)
+ warn about div by 0 in const
+ opt: print(4) -> converted to string
+ warn: use of unassigned variable
+ ? : operator
+ string functions, [], substr, first(), last(), trim
+ classes
+ function constexpr (abs,cin,cos)
+ namespace
+ continue parsing after error
+ in - if(x in {3,5})
+ switch case
+ optimize multiple conditions (- -a), if(!(a != b))
+ http://www.tutorialspoint.com/cplusplus/cpp_while_loop.htm
+ allow to turn off optimize const expr
+ superbreak
+ detect unreachable code
+ function taking or returning reference (this require containing pointer to Var in local/global - this need to not change between uses)
+ const
+ advanced function default params (using expr not const_item)
+ object
+ register function thiscall
+ typeid
+ static type functions
+ register c++ global
+ enum
+ register enum
+ multiple files/modules (sharing classes, globals - current globals-> 0 level locals)
+ variable shadowing?
+ dictionary/map
+ parse optimizations:
	+ store functions in map[string] -> vector<Func>
+ delegate/callback
+ union?
+ better parser/tokenizer - checking multiple items in advance, for example
	var_type item ( - func_decl
	var_type item - var_decl
	var_type ( - ctor
+ optimize:
	+ remove unused function
	+ remove unreachable code
	+ remove call to function without side effects

calling conventions
http://www.angelcode.com/dev/callconv/callconv.html
return value
	+ bool, int, float, string
	+ by ref
	+ by pointer
	+ array
	+ with constr
	+ with assignment
	+ with destructor
	
array, ctor, dtor, assign, > 2 (>4 x64) - return in memory
else return in reg
