+ register member function as member func

- CObj b1, b7(7); not allowed, why? (this syntax is not allowed, require b7 = CObj(7), need fix)
+ AssertException
+ non instanceable class
+ register global
+ thiscall ctor

+ AddFunction/Method optional parameter name
+ register virtual function or else (sizeof(ptr) != sizeof(void*))
+ string is value type
+ pass by reference
+ struct
+ nullable
+ string as struct (remove op add)

+ checking ref counter on cleanup (for class/string)
+ allow vars with same name as function
+ call function before declaration
+ better Type* handling, not passing magic index
+ remove not required interactions between Module/Parser and Decompile/Parser (for example ParserMethod/FindEqualFunction should be inside RegisterMethod)
+ safer reference returning (incrase ref counter for class if this is member, what with script registered?)
+ refactor register class/funcs in core lib to new unit tests
+ [VEC3 pos; float rot] GetPos()
	{
		return [pos = my_pos, rot = my_rot];
	}
	unnamed struct

+ array
vector functions:
	count
	push
	pop
	front
	back
	insert
	erase
	at
	empty
	+ const size
	+ braces initialization
	+ for each
	+ operator []

+ variadic functions (params)
+ signaling parse/run thread to exit, not using TerminateThread

+ class
	+ dtor
	+ operators + - etc
	+ string member
	+ class member (detect recursion), allow declare member of same type as class (but prevent it until nullable type, just don't show error of unknown item)
	+ properties
	+ default value for class argument in function
	+ unit test register c++ struct (require modules)
	+ copy ctor (default)
	+ inhertiance
	+ interfaces

+ is operator
	+ compare object and type if(a is INT2)
+ default string for code function
+ allow reuse variable name
+ object/string deconstruction
+ cast operator (type)x or x as type ?
+ warn about implict cast (setting)
+ custom cast operators
+ no memleaks, reuse ParseNode (currently there will be old childs)
+ warn about div by 0 in const
+ opt: print(4) -> converted to string
+ warn: use of unassigned variable
+ ? : operator
+ string functions, [], substr, first(), last(), trim
+ classes
+ function constexpr (abs,cin,cos)
+ namespace
+ continue parsing after error
+ in - if(x in {3,5})
+ switch case
+ optimize multiple conditions (- -a), if(!(a != b))
+ http://www.tutorialspoint.com/cplusplus/cpp_while_loop.htm
+ allow to turn off optimize const expr
+ superbreak
+ detect unreachable code
+ const
+ advanced function default params (using expr not const_item)
+ object
+ register function thiscall
+ typeid
+ static type functions
+ register c++ global
+ enum
+ register enum
+ multiple files/modules (sharing classes, globals - current globals-> 0 level locals)
+ types
	+ dictionary/map
	+ list
+ parse optimizations:
	+ store functions in map[string] -> vector<Func>
+ delegate/callback
+ union?
+ optimize:
	+ remove unused function
	+ remove unreachable code
	+ remove call to function without side effects
	+ don't initialize members that won't be used until overwritten
	+ TryConstExpr for IS
	+ exclude functions without side effects or empty and don't call them
+ && short circuiting
+ char type
+ remove duplicates in string table
+ shorter class initialization: A b(3,4) ?
+ await/async for spawning units
	+ wait for spawn
	+ spawn instantly
	+ don't wait
+ stdlib
	+ math: random, rand, floor, ceil, round, abs, sin, cos
+ include code in decompile
+ ref variable
+ ref arg default value
+ take reference operator

calling conventions
http://www.angelcode.com/dev/callconv/callconv.html
return value
	+ bool, int, float, string
	+ by ref
	+ by pointer
	+ array
	+ with constr
	+ with assignment
	+ with destructor
	
array, ctor, dtor, assign, > 2 (>4 x64) - return in memory
else return in reg
