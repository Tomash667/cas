#include "Pch.h"
#include "Op.h"
#include "Symbol.h"

// http://en.cppreference.com/w/cpp/language/operator_precedence
SymbolInfo symbols[] = {
	S_NONE, "none", 99, true, 0, NOP, ST_NONE, nullptr, "",
	S_ADD, "add", 6, true, 2, ADD, ST_NONE, "$opAdd", "+",
	S_SUB, "subtract", 6, true, 2, SUB, ST_NONE, "$opSub", "-",
	S_MUL, "multiply", 5, true, 2, MUL, ST_NONE, "$opMul", "*",
	S_DIV, "divide", 5, true, 2, DIV, ST_NONE, "$opDiv", "/",
	S_MOD, "modulo", 5, true, 2, MOD, ST_NONE, "$opMod", "%",
	S_BIT_AND, "bit and", 10, true, 2, BIT_AND, ST_NONE, "$opBitAnd", "&",
	S_BIT_OR, "bit or", 12, true, 2, BIT_OR, ST_NONE, "$opBitOr", "|",
	S_BIT_XOR, "bit xor", 11, true, 2, BIT_XOR, ST_NONE, "$opBitXor", "^",
	S_BIT_LSHIFT, "bit left shift", 7, true, 2, BIT_LSHIFT, ST_NONE, "$opBitLshift", "<<",
	S_BIT_RSHIFT, "bit right shift", 7, true, 2, BIT_RSHIFT, ST_NONE, "$opBitRshift", ">>",
	S_PLUS, "unary plus", 3, false, 1, NOP, ST_NONE, "$opPlus", "+",
	S_MINUS, "unary minus", 3, false, 1, NEG, ST_NONE, "$opMinus", "-",
	S_EQUAL, "equal", 9, true, 2, EQ, ST_NONE, "$opEqual", "==",
	S_NOT_EQUAL, "not equal", 9, true, 2, NOT_EQ, ST_NONE, "$opNotEqual", "!=",
	S_GREATER, "greater", 8, true, 2, GR, ST_NONE, "$opGreater", ">",
	S_GREATER_EQUAL, "greater equal", 8, true, 2, GR_EQ, ST_NONE, "$opGreaterEqual", ">=",
	S_LESS, "less", 8, true, 2, LE, ST_NONE, "$opLess", "<",
	S_LESS_EQUAL, "less equal", 8, true, 2, LE_EQ, ST_NONE, "$opLessEqual", "<=",
	S_AND, "and", 13, true, 2, AND, ST_NONE, nullptr, "&&",
	S_OR, "or", 14, true, 2, OR, ST_NONE, nullptr, "||",
	S_NOT, "not", 3, false, 1, NOT, ST_NONE,  "$opNot", "!",
	S_BIT_NOT, "bit not", 3, false, 1, BIT_NOT, ST_NONE, "$opBitNot", "~",
	S_MEMBER_ACCESS, "member access", 2, true, 2, NOP, ST_NONE, nullptr, ".",
	S_ASSIGN, "assign", 15, false, 2, NOP, ST_ASSIGN, "$opAssign", "=",
	S_ASSIGN_ADD, "assign add", 15, false, 2, S_ADD, ST_ASSIGN, "$opAssignAdd", "+=",
	S_ASSIGN_SUB, "assign subtract", 15, false, 2, S_SUB, ST_ASSIGN, "$opAssignSub", "-=",
	S_ASSIGN_MUL, "assign multiply", 15, false, 2, S_MUL, ST_ASSIGN, "$opAssignMul", "*=",
	S_ASSIGN_DIV, "assign divide", 15, false, 2, S_DIV, ST_ASSIGN, "$opAssignDiv", "/=",
	S_ASSIGN_MOD, "assign modulo", 15, false, 2, S_MOD, ST_ASSIGN, "$opAssignMod", "%=",
	S_ASSIGN_BIT_AND, "assign bit and", 15, false, 2, S_BIT_AND, ST_ASSIGN, "$opAssignBitAnd", "&=",
	S_ASSIGN_BIT_OR, "assign bit or", 15, false, 2, S_BIT_OR, ST_ASSIGN, "$opAssignBitOr", "|=",
	S_ASSIGN_BIT_XOR, "assign bit xor", 15, false, 2, S_BIT_XOR, ST_ASSIGN, "$opAssignBitXor", "^=",
	S_ASSIGN_BIT_LSHIFT, "assign bit left shift", 15, false, 2, S_BIT_LSHIFT, ST_ASSIGN, "$opAssignBitLshift", "<<=",
	S_ASSIGN_BIT_RSHIFT, "assign bit right shift", 15, false, 2, S_BIT_RSHIFT, ST_ASSIGN, "$opAssignBitRshift", ">>=",
	S_PRE_INC, "pre increment", 3, false, 1, INC, ST_INC_DEC, "$opPreInc", "++",
	S_PRE_DEC, "pre decrement", 3, false, 1, DEC, ST_INC_DEC, "$opPreDec", "--",
	S_POST_INC, "post increment", 2, true, 1, INC, ST_INC_DEC, "$opPostInc", "++",
	S_POST_DEC, "post decrement", 2, true, 1, DEC, ST_INC_DEC, "$opPostDec", "--",
	S_IS, "reference equal", 8, true, 2, IS, ST_NONE, nullptr, "is",
	S_AS, "cast", 8, true, 2, CAST, ST_NONE, nullptr, "as",
	S_SUBSCRIPT, "subscript", 2, true, 1, NOP, ST_SUBSCRIPT, "$opIndex", "[]",
	S_CALL, "function call", 2, true, 1, NOP, ST_CALL, "$opCall", "()",
	S_TERNARY, "ternary", 15, false, 2, NOP, ST_NONE, nullptr, "?:",
	S_SET_REF, "assign reference", 15, false, 2, NOP, ST_NONE, nullptr, "->",
	S_SET_LONG_REF, "assign long reference", 15, false, 2, NOP, ST_NONE, nullptr, "-->",
	S_INVALID, "invalid", 99, true, 0, NOP, ST_NONE, nullptr, ""
};
static_assert(sizeof(symbols) / sizeof(SymbolInfo) == S_MAX, "Missing symbols.");

BasicSymbolInfo basic_symbols[] = {
	BS_INC, "+", S_PLUS, S_INVALID, S_ADD, nullptr,
	BS_DEC, "-", S_MINUS, S_INVALID, S_SUB,  nullptr,
	BS_MUL, "*", S_INVALID, S_INVALID, S_MUL, nullptr,
	BS_DIV, "/", S_INVALID, S_INVALID, S_DIV, nullptr,
	BS_MOD, "%", S_INVALID, S_INVALID, S_MOD, nullptr,
	BS_BIT_AND, "&", S_INVALID, S_INVALID, S_BIT_AND, nullptr,
	BS_BIT_OR, "|", S_INVALID, S_INVALID, S_BIT_OR, nullptr,
	BS_BIT_XOR, "^", S_INVALID, S_INVALID, S_BIT_XOR, nullptr,
	BS_BIT_LSHIFT, "<<", S_INVALID, S_INVALID, S_BIT_LSHIFT, nullptr,
	BS_BIT_RSHIFT, ">>", S_INVALID, S_INVALID, S_BIT_RSHIFT, nullptr,
	BS_EQUAL, "==", S_INVALID, S_INVALID, S_EQUAL, nullptr,
	BS_NOT_EQUAL, "!=", S_INVALID, S_INVALID, S_NOT_EQUAL, nullptr,
	BS_GREATER, ">", S_INVALID, S_INVALID, S_GREATER, nullptr,
	BS_GREATER_EQUAL, ">=", S_INVALID, S_INVALID, S_GREATER_EQUAL, nullptr,
	BS_LESS, "<", S_INVALID, S_INVALID, S_LESS, nullptr,
	BS_LESS_EQUAL, "<=", S_INVALID, S_INVALID, S_LESS_EQUAL, nullptr,
	BS_AND, "&&", S_INVALID, S_INVALID, S_AND, nullptr,
	BS_OR, "||", S_INVALID, S_INVALID, S_OR, nullptr,
	BS_NOT, "!", S_NOT, S_INVALID, S_INVALID, nullptr,
	BS_BIT_NOT, "~", S_BIT_NOT, S_INVALID, S_INVALID, nullptr,
	BS_ASSIGN, "=", S_INVALID, S_INVALID, S_ASSIGN, nullptr,
	BS_ASSIGN_ADD, "+=", S_INVALID, S_INVALID, S_ASSIGN_ADD, nullptr,
	BS_ASSIGN_SUB, "-=", S_INVALID, S_INVALID, S_ASSIGN_SUB, nullptr,
	BS_ASSIGN_MUL, "*=", S_INVALID, S_INVALID, S_ASSIGN_MUL, nullptr,
	BS_ASSIGN_DIV, "/=", S_INVALID, S_INVALID, S_ASSIGN_DIV, nullptr,
	BS_ASSIGN_MOD, "%=", S_INVALID, S_INVALID, S_ASSIGN_MOD, nullptr,
	BS_ASSIGN_BIT_AND, "&=", S_INVALID, S_INVALID, S_ASSIGN_BIT_AND, nullptr,
	BS_ASSIGN_BIT_OR, "|=", S_INVALID, S_INVALID, S_ASSIGN_BIT_OR, nullptr,
	BS_ASSIGN_BIT_XOR, "^=", S_INVALID, S_INVALID, S_ASSIGN_BIT_XOR, nullptr,
	BS_ASSIGN_BIT_LSHIFT, "<<=", S_INVALID, S_INVALID, S_ASSIGN_BIT_LSHIFT, nullptr,
	BS_ASSIGN_BIT_RSHIFT, ">>=", S_INVALID, S_INVALID, S_ASSIGN_BIT_RSHIFT, nullptr,
	BS_DOT, ".", S_INVALID, S_INVALID, S_MEMBER_ACCESS, nullptr,
	BS_INC, "++", S_PRE_INC, S_POST_INC, S_INVALID, nullptr,
	BS_DEC, "--", S_PRE_DEC, S_POST_DEC, S_INVALID, nullptr,
	BS_IS, "is", S_INVALID, S_INVALID, S_IS, nullptr,
	BS_AS, "as", S_INVALID, S_INVALID, S_AS, nullptr,
	BS_SUBSCRIPT, "[", S_INVALID, S_SUBSCRIPT, S_INVALID, "[]",
	BS_CALL, "(", S_INVALID, S_CALL, S_INVALID, "()",
	BS_TERNARY, "?", S_INVALID, S_INVALID, S_INVALID, nullptr,
	BS_SET_REF, "->", S_INVALID, S_INVALID, S_SET_REF, nullptr,
	BS_SET_LONG_REF, "-->", S_INVALID, S_INVALID, S_SET_LONG_REF, nullptr
};
static_assert(sizeof(basic_symbols) / sizeof(BasicSymbolInfo) == BS_MAX, "Missing basic symbols.");
