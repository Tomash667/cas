code:
	[ line_or_block ... ] EOF

line_or_block:
	{ [ line_or_block ... ] }
	line
	
line:
	if ( expr ) line_or_block [ else line_or_block ]
	while ( expr ) line_or_block
	var_type var_decl [, var_decl ...] ;
	expr ;
	;

var_type:
	void
	bool
	int
	float
	string

var_decl:
	<var_name> [ = expr ]

expr<END>:
	[unary_op] item [ op [unary_op] item ... ] <END>

item:
	<var_name>
	<int>
	<float>
	<func> args
	<string>
	const

args:
	( expr [, expr ...] )

op:
	base_op
	==
	!=
	>
	>=
	<
	<=
	&&
	||
	!
	( expr )
	. <obj_func> args
	+=
	-=
	*=
	/=
	=

base_op:
	+
	-
	*
	/
	%

unary_op:
	+
	-
	!

const:
	true
	false

=============================
lvar = rval ;
