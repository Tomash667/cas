code:
	[ line_or_block ... ] EOF

line_or_block:
	block
	line

block:
	{ [ line_or_block ...] }
	
line:
	var_type <func_name> ( ) block // can only be used in top block
	if cond line_or_block [ else line_or_block ]
	do line_or_block while cond ;
	while cond line_or_block
	for ( [ var_type_decl / expr ] ; [ expr ] ; [ expr ] ) line_or_block
	var_type_decl ;
	break ;  // must be inside loop block
	expr ;
	;

var_type_decl:
	var_type var_decl [, var_decl ...]

cond:
	( expr ) // expr returns must return bool

var_type:
	void
	bool
	int
	float
	string

var_decl:
	<var_name> [ = expr ]

expr<END>:
	expr_part [op expr_part ...] <END>

expr_part:
	[unary_op ...] [inc_dec_op ...] item / ( expr ) [inc_dec_op]

item:
	<var_name>
	<int>
	<float>
	<func> args
	<string>
	const

args:
	( expr [, expr ...] )

op:
	base_op
	==
	!=
	>
	>=
	<
	<=
	&&
	||
	!
	( expr )
	. <obj_func> args
	+=
	-=
	*=
	/=
	=
	++
	--

base_op:
	+
	-
	*
	/
	%

unary_op:
	+
	-
	!

inc_dec_op:
	++
	--

const:
	true
	false

=============================
lvar = rval ;
