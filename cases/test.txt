/*class A
{
	A() { println("ctor A"); }
	A(int _1) { println("ctor A "+_1); }
	A(A a) { println("copy A"); }
	//A(B b) { println("copy B"); }
	void operator = (A a) { println("assign A"); }
	//void operator = (C c) { println("assign C"); }
}
class B {}
class C {}*/

// new syntax
/*


/*
A a0; // ctor A
A a01(); // ctor A
A a02 = A(); // ctor A
A a03(){println("func");}(); // func
A a1(1); // ctor A 1
A a10 = A(2); // ctor A 2
A a2 = a1; // copy A
A a21 = A(a1); // copy A
A a22(a1); // copy A
a2 = a1; // assign
*/
//B b;
//C c;
//A a3 = b; // copy, nie działa, powinno użyć "copy B"
//a3 = b; // ?, copy B jeśli nie ma =
//A a4 = c; // ?
//a3 = c;

pause();

/*
var decl zawsze ma wywolywać copy ctor
a = b; wywołuje assign lub copy ctor
*/
